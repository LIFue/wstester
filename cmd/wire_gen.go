// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"context"
	"github.com/gin-gonic/gin"
	"wstester/internal/base/data"
	"wstester/internal/base/encrypt"
	"wstester/internal/base/httputil"
	"wstester/internal/base/server"
	"wstester/internal/base/ws"
	"wstester/internal/controller"
	"wstester/internal/repo/message"
	"wstester/internal/repo/platform"
	"wstester/internal/repo/user"
	"wstester/internal/service/login"
	message2 "wstester/internal/service/message"
	platform2 "wstester/internal/service/platform"
	user2 "wstester/internal/service/user"
	"wstester/internal/service/video"
)

// Injectors from wire.go:

func InitializeWsServer(debug bool, ctx context.Context, dbConf *data.Database) (*gin.Engine, error) {
	db, err := data.NewDB(debug, dbConf)
	if err != nil {
		return nil, err
	}
	dataData, err := data.NewData(db)
	if err != nil {
		return nil, err
	}
	platformRepo := platform.NewPlatformRepo(dataData)
	httpUtil := httputil.NewHttpUtil()
	sm3 := encrypt.NewSM3()
	md5 := encrypt.NewMD5()
	encryptEncrypt := encrypt.NewEncrypt(sm3, md5)
	loginService := login.NewLogin(httpUtil, encryptEncrypt)
	videoService := video.NewVideoService()
	userRepo := user.NewUserRepo(dataData)
	userService := user2.NewUserService(userRepo)
	messageRepo := message.NewMessageRepo(dataData)
	messageService := message2.NewMessageService(messageRepo)
	wsManager := ws.NewWsManager(ctx)
	platformService := platform2.NewPlatformService(platformRepo, loginService, videoService, userService, messageService, encryptEncrypt, wsManager)
	controllerPlatform := controller.NewPlatform(platformService)
	arith := controller.NewArith()
	controllerMessage := controller.NewMessageController(messageService)
	controllerRegister := controller.NewControllerRegister()
	engine := server.NewWebSocketServer(controllerPlatform, arith, controllerMessage, controllerRegister, wsManager)
	return engine, nil
}
